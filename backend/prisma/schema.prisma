// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role {
  Customer
  Admin
  Business
}
model User {
  id          String  @id @default(cuid())
  username    String  @unique
  name        String
  password    String?
  oauthId     String?
  userInfo    userInfo?
  restaurant  Restaurant?
  role        role @default(Customer)
  
  history     Order[]

  createdAt DateTime @default(now())
}

model userInfo {
  id        String @id @default(cuid())
  userId    String @unique
  email     String? @unique
  bio       String?
  profile   String?
  address   String?

  // it should also containt this so that we can figure out if he's near the store
  // latitude      Float
  // longitude     Float

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum businessStatus {
  Open
  Closed
}

// add logo later
// and also other things for restaurant
model Restaurant {
  id            String    @id @default(cuid())
  ownerId       String    @unique
  name          String
  address       String
  description   String?
  email         String // this is needed because userInfo is not gonna exist on businesses // also use for notification
  phoneNumber   BigInt
  latitude      Float
  longitude     Float
  status        businessStatus @default(Closed)
  openingHours  Json

  // type of business
  cuisineType   String?
  DeliveryRange String
  // add categories for the user to select later on

  orders        Order[]
  menus         Menu[]
  owner         User  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  categories    Category[]

  updatedat     DateTime  @updatedAt()
  createdAt     DateTime  @default(now())
}

model Category {
  id              String @id @default(cuid())
  CategoryName    String

  restaurantId    String
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onUpdate: Cascade)

  menu            Menu[]
  @@unique([CategoryName, restaurantId])
} 
model Menu {
  id              String @id @default(cuid())
  name            String
  description     String?
  price           Float
  
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade)

  availability    Boolean

  restaurantId    String
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)  
  
  ordersItem      OrderItem[]

  createdAt       DateTime @default(now())
}

enum OrderStatus {
  Delivered
  Processing
}
model Order {
  id              String    @id @default(cuid())
  userId          String
  restaurandId    String
  items           Json // 
  totalAmount     Float
  status          OrderStatus @default(Processing)

  deliveryAddress String
  deliveryTime    DateTime?

  paymentMethod   String

  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant      Restaurant  @relation(fields: [restaurandId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  createdAt       DateTime    @default(now())
}

model OrderItem {
  id          String     @id @default(cuid())
  orderId     String
  menuId      String
  quantity    Int
  price       Float

  order       Order   @relation(fields: [orderId], references: [id])
  menu        Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade) // to know what items info
}

// model Review {
//   id          Int     @id @default(autoincrement())
//   userId      Int
//   businessId  Int
//   rating      Int
//   comment     String?
//   createdAt   DateTime @default(now())
//   user        User    @relation(fields: [userId], references: [id])
//   business    Business @relation(fields: [businessId], references: [id])
// }

// model Promotion {
//   id          Int     @id @default(autoincrement())
//   code        String  @unique
//   description String
//   discount    Float
//   validFrom   DateTime
//   validUntil  DateTime
//   businessId  Int
//   business    Business @relation(fields: [businessId], references: [id])
// }